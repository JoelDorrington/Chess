<HeadContent>
    <style>
        :root {
            --square-size: 75px;
        }
        .board {
            position: relative;
            width: calc(var(--square-size) * 8);
            height: calc(var(--square-size) * 8);
        }
        .rank {
            display: flex;
            margin: 0;
            width: 100%;
            height: var(--square-size);
            --start-color: var(--light-square-color, #ccc);
            --alt-color: var(--dark-square-color, #333);
        }

        .rank:nth-child(even) {
            --start-color: var(--dark-square-color, #333);
            --alt-color: var(--light-square-color, #ccc);
        }

        .file {
            width: var(--square-size);
            height: var(--square-size);
            background-color: var(--start-color);
            position: relative;
        }

        .file:nth-child(even) {
            background-color: var(--alt-color);
        }

        .move-indicator {
            width: var(--square-size);
            height: var(--square-size);
            position: absolute;
            transform: scale(0.8);
            top: 0;
            left: 0;
            background-color: #0006;
            border-radius: 50%;
        }
        .promotionMenu {
            position: absolute;
            left: 50%;
            transform: translateX(-50%);
            list-style: none;
            padding: 0;
            background: white;
            box-shadow: 1px 2px 4px 0px black;
            margin-top: 10px;
            z-index: 10;
        }

        .gameResultAlert {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            box-shadow: 1px 2px 4px 0px black;
            padding: 50px;
        }

        .moveNumber {
            font-weight: bold;
        }

        .moveNotation {
            margin: 2px;
            cursor: pointer;
        }

        .moveNotation:hover {
            background: whitesmoke;
        }
    </style>
</HeadContent>
<h3>ChessBoard <button @onclick="() => resetBoard()">Reset</button></h3>
<button @onclick="() => botActivated = !botActivated">@(botActivated ? "Deactivate Bot" : "Activate Bot")</button>
<div class="board">

    @for (var rank = 7; rank >= 0; rank--)
    {
        <div class="rank">
            @for (var file = 0; file < 8; file++)
            {
                var thisFile = file;
                var thisRank = rank;
                var coords = $"{thisFile},{thisRank}";
                <div class="file">
                    @if (moves.ContainsKey(coords))
                    {
                        var move = moves[coords];
                        <span class="move-indicator" @onclick="() => submitMove(move)"></span>
                        @if (promotionMenuSquare == coords) {
                            <PromotionMenu Colour="board.currentTurn" OnSelectType="@((Piece.Type type) => submitMove(move.SelectPromotionType(type)))" />
                        }
                    }
                    @if (layout != null && layout[thisFile][thisRank] != null)
                    {
                        <img title="@thisFile,@thisRank" @onclick="() => showMovesForPiece(thisFile, thisRank)" src="@GetPieceImage(layout[thisFile][thisRank])" style="width: var(--square-size);" />
                    }
                </div>
            }
        </div>
    }
    @if (message != null)
    {
        <div class="gameResultAlert">
            @message <br/>
            <button @onclick="() => message = null">Dismiss</button>
            <button @onclick="() => resetBoard()">Reset</button>
        </div>
    }
</div>
<GameHistory History="board.MoveHistory" OnSelectMove="SetCurrentBoard" />
<div class="controls">
    <button class="firstMoveButton" @onclick="() => ShowFirstBoard()">|&lt;</button>
    <button class="previousMoveButton" @onclick="() => ShowPreviousBoard()">&lt;</button>
    <button class="nextMoveButton" @onclick="() => ShowNextBoard()">&gt;</button>
    <button class="lastMoveButton" @onclick="() => ShowLastBoard()">&gt;|</button>
</div>

@code {
    public int currentMoveIndex = 0;
    public string? message = null;
    public Board board = new Board();
    public string? promotionMenuSquare;
    public Piece[][] layout = {};
    public Dictionary<string,Move> moves = new Dictionary<string, Move>();
    public Bot? bot = null;
    public bool botActivated = false;
    public string GetPieceImage(Piece? piece)
    {
        if (piece == null) return "";
        return $"images/{piece.type}{piece.colour}.png";
    }

    private void ClearMoves()
    {
        moves = new Dictionary<string, Move>();
    }
    public void showMovesForPiece(int file, int rank)
    {
        ClearMoves();
        this.promotionMenuSquare = null;
        Piece piece = this.layout[file][rank];
        if (this.board == null || piece == null) return;
        try
        {
            List<Move> legalMoves = this.board.GetLegalMovesForPiece(piece);
            for (int i = 0; i < legalMoves.Count; i++)
            {
                int[] coords = legalMoves[i].to.GetCoordinates();
                this.moves[$"{coords[0]},{coords[1]}"] = legalMoves[i];
            }
            List<string> keys = new List<string>(moves.Keys);
        }
        catch { }
    }
    public void submitMove(Move move)
    {
        try
        {
            board = board.MovePiece(move);
            ClearMoves();
            layout = board.GetLayout();
            currentMoveIndex = board.MoveHistory.Count-1;

            if (board.LastMove != null && board.LastMove.isCheckMate)
            {
                Piece.Colour winner = board.currentTurn == Piece.Colour.White ? Piece.Colour.Black : Piece.Colour.White;
                message = $"{winner} wins by checkmate!";
            }
            else if (board.LastMove != null && board.LastMove.isDraw)
            {
                message = "Stalemate!";
            }


        } catch(Exception e)
        {
            if(e.Message == "Promotion Type Required"){
                // Show Promotion Menu
                int[] coords = move.to.GetCoordinates();
                promotionMenuSquare = $"{coords[0]},{coords[1]}";
            } else {
                Console.Error.WriteLine(e);
                ClearMoves();
            }
        }

    }
    public void resetBoard ()
    {
        board.ResetBoard();
        layout = board.GetLayout();
        ClearMoves();
        currentMoveIndex = 0;
        message = null;
    }
    protected override void OnInitialized()
    {
        bot = new(board);
        layout = board.GetLayout();
        currentMoveIndex = 0;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (bot!=null && botActivated && !bot.thinking && board.currentTurn == bot?.colour)
        {
            submitMove(await bot.FindMoveAsync());
            StateHasChanged();
        }
    }

    public void ShowPreviousBoard()
    {
        if (currentMoveIndex == 0) return;
        SetCurrentBoard(currentMoveIndex - 1);
    }

    public void ShowNextBoard()
    {
        if (currentMoveIndex == board.MoveHistory.Count - 1) return;
        SetCurrentBoard(currentMoveIndex + 1);
    }

    public void ShowFirstBoard()
    {
        SetCurrentBoard(0);
    }

    public void ShowLastBoard()
    {
        SetCurrentBoard(board.MoveHistory.Count - 1);
    }

    public void SetCurrentBoard(int index)
    {
        ClearMoves();
        currentMoveIndex = index;
        //board.NavHistoryToIndex(currentMoveIndex); // TODO
        layout = board.GetLayout();
    }

}
